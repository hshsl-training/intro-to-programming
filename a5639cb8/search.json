[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Intro to Programming",
    "section": "",
    "text": "Schedule\n\n\nWeek\nTopic\n\n\n\n\n1\nIntro to the Command Line\n\n\n2\nR and RStudio\n\n\n3\nPython"
  },
  {
    "objectID": "r_lesson/blank_lesson.html",
    "href": "r_lesson/blank_lesson.html",
    "title": "CDABS Intro to Programming",
    "section": "",
    "text": "#This is a test\nIt’s a test"
  },
  {
    "objectID": "python_lesson/blank_lesson.html",
    "href": "python_lesson/blank_lesson.html",
    "title": "CDABS Intro to Programming",
    "section": "",
    "text": "test test test"
  },
  {
    "objectID": "shell_lesson/01-introduction.html",
    "href": "shell_lesson/01-introduction.html",
    "title": "Introducing the Shell",
    "section": "",
    "text": "Note\n\n\n\nAll text and materials in these workshops comes from the Data Carpentries. More especifically this lesson follows the Data Carpentries lesson “Introduction to the Command Line for Genomics”.\nCDABS has modified this lesson to better fit our techonogical capabilities."
  },
  {
    "objectID": "shell_lesson/01-introduction.html#lesson-objectives",
    "href": "shell_lesson/01-introduction.html#lesson-objectives",
    "title": "Introducing the Shell",
    "section": "Lesson Objectives",
    "text": "Lesson Objectives\nObjectives\n\nDescribe key reasons for learning shell.\nNavigate your file system using the command line.\nAccess and read help files for bash programs and use help files to identify useful command options.\nDemonstrate the use of tab completion, and explain its advantages.\n\nQuestions to be answered in this lesson\n\nWhat is a command shell and why would I use one?\nHow can I move around on my computer?\nHow can I see what files and directories I have?\nHow can I specify the location of a file or directory on my computer?"
  },
  {
    "objectID": "shell_lesson/01-introduction.html#what-is-a-shell-and-why-should-i-care",
    "href": "shell_lesson/01-introduction.html#what-is-a-shell-and-why-should-i-care",
    "title": "Introducing the Shell",
    "section": "What is a shell and why should I care?",
    "text": "What is a shell and why should I care?\nA shell is a computer program that presents a command line interface which allows you to control your computer using commands entered with a keyboard instead of controlling graphical user interfaces (GUIs) with a mouse/keyboard/touchscreen combination.\nThere are many reasons to learn about the shell:\n\nMany bioinformatics tools can only be used through a command line interface. Many more have features and parameter options which are not available in the GUI. BLAST is an example. Many of the advanced functions are only accessible to users who know how to use a shell.\nThe shell makes your work less boring. In bioinformatics you often need to repeat tasks with a large number of files. With the shell, you can automate those repetitive tasks and leave you free to do more exciting things.\nThe shell makes your work less error-prone. When humans do the same thing a hundred different times (or even ten times), they’re likely to make a mistake. Your computer can do the same thing a thousand times with no mistakes.\nThe shell makes your work more reproducible. When you carry out your work in the command-line (rather than a GUI), your computer keeps a record of every step that you’ve carried out, which you can use to re-do your work when you need to. It also gives you a way to communicate unambiguously what you’ve done, so that others can inspect or apply your process to new data.\nMany bioinformatic tasks require large amounts of computing power and can’t realistically be run on your own machine. These tasks are best performed using remote computers or cloud computing, which can only be accessed through a shell.\n\nIn this lesson you will learn how to use the command line interface to move around in your file system."
  },
  {
    "objectID": "shell_lesson/01-introduction.html#how-to-access-the-shell",
    "href": "shell_lesson/01-introduction.html#how-to-access-the-shell",
    "title": "Introducing the Shell",
    "section": "How to access the shell",
    "text": "How to access the shell\nOn a Mac or Linux machine, you can access a shell through a program called “Terminal”, which is already available on your computer. The Terminal is a window into which we will type commands.\nIf you’re using Windows, you’ll need to download a separate program to access the shell called “Git Bash” which is the one we are going to use today.\nWe will learn the basics of the shell by manipulating some data files. Some of these files are very large, and would take time to download to your computer."
  },
  {
    "objectID": "shell_lesson/01-introduction.html#the-git-bash-window",
    "href": "shell_lesson/01-introduction.html#the-git-bash-window",
    "title": "Introducing the Shell",
    "section": "The Git Bash Window",
    "text": "The Git Bash Window\nAs you open your Terminal, you may see something like the following:\nComputerUserName-####ABC MINGW64 ~\n$\nThe dollar sign is a prompt, which shows us that the shell is waiting for input; your shell may use a different character as a prompt and may add information before the prompt. When typing commands, either from these lessons or from other sources, do not type the prompt, only the commands that follow it.\nThis symbol may be different if you are using a Linux or Mac computer."
  },
  {
    "objectID": "shell_lesson/01-introduction.html#the-data",
    "href": "shell_lesson/01-introduction.html#the-data",
    "title": "Introducing the Shell",
    "section": "The Data",
    "text": "The Data\nThe data used in this lesson is related to the bioinformatics field, you will be handling fastq files and performing searches on it.\nTo get access to the data you must learn how to unzip a tar.gz file."
  },
  {
    "objectID": "shell_lesson/01-introduction.html#navigating-your-file-system",
    "href": "shell_lesson/01-introduction.html#navigating-your-file-system",
    "title": "Introducing the Shell",
    "section": "Navigating your file system",
    "text": "Navigating your file system\nThe part of the operating system that manages files and directories is called the file system. It organizes our data into files, which hold information, and directories (also called “folders”), which hold files or other directories.\nSeveral commands are frequently used to create, inspect, rename, and delete files and directories.\nLet’s find out where we are by running a command called pwd (which stands for “print working directory”).\nAt any moment, our current working directory is our current default directory, i.e., the directory that the computer assumes we want to run commands in, unless we explicitly specify something else.\n$ pwd\nTODO\nLet’s look at how our file system is organized. We can see what files and subdirectories are in this directory by running ls, which stands for “listing”:\n$ ls\nTODO\nls prints the names of the files and directories in the current directory in alphabetical order, arranged neatly into columns. We’ll be working within the shell_data subdirectory, and creating new subdirectories, throughout this workshop.\nThe command to change locations in our file system is cd, followed by a directory name to change our working directory. cd stands for “change directory”.\nLet’s say we want to navigate to the shell_data directory we saw above. We can use the following command to get there:\n$ cd shell_data\nLet’s look at what is in this directory:\n$ ls\nsra_metadata  untrimmed_fastq\nWe can make the ls output more comprehensible by using the flag -F, which tells ls to add a trailing / to the names of directories:\n$ ls -F\nsra_metadata/  untrimmed_fastq/\nAnything with a “/” after it is a directory. Things with a “*” after them are programs. If there are no decorations, it’s a file. ls has lots of other options.\nTo find out what they are, we can type:\n$ ls -- help\nls -- help (short for manual) displays detailed documentation (also referred as man page or man file) for bash commands. It is a powerful resource to explore bash commands, understand their usage and flags. Some manual files are very long. You can scroll through the file using your keyboard’s down arrow or use the Space key to go forward one page and the b key to go backwards one page. When you are done reading, hit q to quit."
  },
  {
    "objectID": "shell_lesson/01-introduction.html#exercise",
    "href": "shell_lesson/01-introduction.html#exercise",
    "title": "Introducing the Shell",
    "section": "Exercise",
    "text": "Exercise\nUse the -l option for the ls command to display more information for each item in the directory. What is one piece of additional information this long format gives you that you don’t see with the bare ls command?\n$ ls -l\ntotal 8\ndrwxr-x--- 2 dcuser dcuser 4096 Jul 30  2015 sra_metadata\ndrwxr-xr-x 2 dcuser dcuser 4096 Nov 15  2017 untrimmed_fastq\nThe additional information given includes the name of the owner of the file, when the file was last modified, and whether the current user has permission to read and write to the file.\n\n\n\n\n\n\nNote\n\n\n\nNo one can possibly learn all of these arguments, that’s what the manual page is for. You can (and should) refer to the manual page or other help files as needed.\n\n\nLet’s go into the untrimmed_fastq directory and see what is in there.\n$ cd untrimmed_fastq\n$ ls -F\nSRR097977.fastq  SRR098026.fastq\nThis directory contains two files with .fastq extensions. FASTQ is a format for storing information about sequencing reads and their quality. We will be learning more about FASTQ files in a later lesson."
  },
  {
    "objectID": "shell_lesson/01-introduction.html#shortcut-tab-completion",
    "href": "shell_lesson/01-introduction.html#shortcut-tab-completion",
    "title": "Introducing the Shell",
    "section": "Shortcut: Tab Completion",
    "text": "Shortcut: Tab Completion\nTyping out file or directory names can waste a lot of time and it’s easy to make typing mistakes. Instead we can use tab complete as a shortcut. When you start typing out the name of a directory or file, then hit the Tab key, the shell will try to fill in the rest of the directory or file name.\nReturn to your home directory:\n$ cd\nthen enter:\n$ cd she<tab>\nThe shell will fill in the rest of the directory name for shell_data.\nNow change directories to untrimmed_fastq in shell_data\n$ cd shell_data\n$ cd untrimmed_fastq\nUsing tab complete can be very helpful. However, it will only autocomplete a file or directory name if you’ve typed enough characters to provide a unique identifier for the file or directory you are trying to access.\nFor example, if we now try to list the files which names start with SR by using tab complete:\n$ ls SR<tab>\nThe shell auto-completes your command to SRR09, because all file names in the directory begin with this prefix. When you hit Tab again, the shell will list the possible choices.\n$ ls SRR09<tab><tab>\nSRR097977.fastq  SRR098026.fastq\nTab completion can also fill in the names of programs, which can be useful if you remember the beginning of a program name.\n$ pw<tab><tab>\npwck      pwconv    pwd       pwdx      pwunconv\nDisplays the name of every program that starts with pw."
  },
  {
    "objectID": "shell_lesson/01-introduction.html#summary",
    "href": "shell_lesson/01-introduction.html#summary",
    "title": "Introducing the Shell",
    "section": "Summary",
    "text": "Summary\nWe now know how to move around our file system using the command line. This gives us an advantage over interacting with the file system through a GUI as it allows us to work on a remote server, carry out the same set of operations on a large number of files quickly, and opens up many opportunities for using bioinformatic software that is only available in command line versions.\nIn the next few episodes, we’ll be expanding on these skills and seeing how using the command line shell enables us to make our workflow more efficient and reproducible.\nLesson Keypoints\n\nThe shell gives you the ability to work more efficiently by using keyboard commands rather than a GUI.\nUseful commands for navigating your file system include: ls, pwd, and cd.\nMost commands take options (flags) which begin with a -.\nTab completion can reduce errors from mistyping and make work more efficient in the shell."
  },
  {
    "objectID": "shell_lesson/02-the-filesystem.html",
    "href": "shell_lesson/02-the-filesystem.html",
    "title": "Navigating Files and Directories",
    "section": "",
    "text": "Use a single command to navigate multiple steps in your directory structure, including moving backwards (one level up).\nPerform operations on files in directories outside your working directory.\nWork with hidden directories and hidden files.\nInterconvert between absolute and relative paths.\nEmploy navigational shortcuts to move around your file system.\nIn most commands the flags can be combined together in no particular order to obtain the desired results/output."
  },
  {
    "objectID": "shell_lesson/02-the-filesystem.html#moving-around-the-file-system",
    "href": "shell_lesson/02-the-filesystem.html#moving-around-the-file-system",
    "title": "Navigating Files and Directories",
    "section": "Moving around the file system",
    "text": "Moving around the file system\nWe’ve learned how to use pwd to find our current location within our file system. We’ve also learned how to use cd to change locations and ls to list the contents of a directory. Now we’re going to learn some additional commands for moving around within our file system.\nUse the commands we’ve learned so far to navigate to the shell_data/untrimmed_fastq directory, if you’re not already there.\n$ cd\n$ cd shell_data\n$ cd untrimmed_fastq\nWhat if we want to move back up and out of this directory and to our top level directory? Can we type cd shell_data? Try it and see what happens.\n$ cd shell_data\n-bash: cd: shell_data: No such file or directory\nYour computer looked for a directory or file called shell_data within the directory you were already in. It didn’t know you wanted to look at a directory level above the one you were located in.\nWe have a special command to tell the computer to move us back or up one directory level.\n$ cd ..\nNow we can use pwd to make sure that we are in the directory we intended to navigate to, and ls to check that the contents of the directory are correct.\n$ pwd\n/home/dcuser/shell_data\n$ ls\nsra_metadata  untrimmed_fastq\nFrom this output, we can see that .. did indeed take us back one level in our file system.\nYou can chain these together like so:\n$ ls ../../\nprints the contents of /home."
  },
  {
    "objectID": "shell_lesson/02-the-filesystem.html#finding-hidden-directories",
    "href": "shell_lesson/02-the-filesystem.html#finding-hidden-directories",
    "title": "Navigating Files and Directories",
    "section": "Finding hidden directories",
    "text": "Finding hidden directories\nFirst navigate to the shell_data directory. There is a hidden directory within this directory. Explore the options for ls to find out how to see hidden directories. List the contents of the directory and identify the name of the text file in that directory.\nHint: hidden files and folders in Unix start with ., for example .my_hidden_directory\n\nSolution (Solution). First use the man command to look at the options for ls.\n$ man ls\nThe -a option is short for all and says that it causes ls to “not ignore entries starting with .” This is the option we want.\n$ ls -a\n.  ..  .hidden  sra_metadata  untrimmed_fastq\nThe name of the hidden directory is .hidden. We can navigate to that directory using cd.\n$ cd .hidden\nAnd then list the contents of the directory using ls.\n$ ls\nyoufoundit.txt\nThe name of the text file is youfoundit.txt."
  },
  {
    "objectID": "shell_lesson/02-the-filesystem.html#examining-the-contents-of-other-directories",
    "href": "shell_lesson/02-the-filesystem.html#examining-the-contents-of-other-directories",
    "title": "Navigating Files and Directories",
    "section": "Examining the contents of other directories",
    "text": "Examining the contents of other directories\nBy default, the ls commands lists the contents of the working directory (i.e. the directory you are in). You can always find the directory you are in using the pwd command. However, you can also give ls the names of other directories to view. Navigate to your home directory if you are not already there.\n$ cd\nThen enter the command:\n$ ls shell_data\nsra_metadata  untrimmed_fastq\nThis will list the contents of the shell_data directory without you needing to navigate there.\nThe cd command works in a similar way.\nTry entering:\n$ cd\n$ cd shell_data/untrimmed_fastq\nThis will take you to the untrimmed_fastq directory without having to go through the intermediate directory."
  },
  {
    "objectID": "shell_lesson/02-the-filesystem.html#navigating-practice",
    "href": "shell_lesson/02-the-filesystem.html#navigating-practice",
    "title": "Navigating Files and Directories",
    "section": "Navigating practice",
    "text": "Navigating practice\nNavigate to your home directory. From there, list the contents of the untrimmed_fastq directory.\n\nSolution (Solution). \n$ cd\n$ ls shell_data/untrimmed_fastq/\nSRR097977.fastq  SRR098026.fastq"
  },
  {
    "objectID": "shell_lesson/02-the-filesystem.html#full-vs.-relative-paths",
    "href": "shell_lesson/02-the-filesystem.html#full-vs.-relative-paths",
    "title": "Navigating Files and Directories",
    "section": "Full vs. Relative Paths",
    "text": "Full vs. Relative Paths\nThe cd command takes an argument which is a directory name. Directories can be specified using either a relative path or a full absolute path. The directories on the computer are arranged into a hierarchy. The full path tells you where a directory is in that hierarchy. Navigate to the home directory, then enter the pwd command.\n$ cd  \n$ pwd  \nYou will see:\n/home/dcuser\nThis is the full name of your home directory. This tells you that you are in a directory called dcuser, which sits inside a directory called home which sits inside the very top directory in the hierarchy. The very top of the hierarchy is a directory called / which is usually referred to as the root directory. So, to summarize: dcuser is a directory in home which is a directory in /. More on root and home in the next section.\nNow enter the following command:\n$ cd /home/dcuser/shell_data/.hidden\nThis jumps forward multiple levels to the .hidden directory. Now go back to the home directory.\n$ cd\nYou can also navigate to the .hidden directory using:\n$ cd shell_data/.hidden\nThese two commands have the same effect, they both take us to the .hidden directory. The first uses the absolute path, giving the full address from the home directory. The second uses a relative path, giving only the address from the working directory. A full path always starts with a /. A relative path does not.\nA relative path is like getting directions from someone on the street. They tell you to “go right at the stop sign, and then turn left on Main Street”. That works great if you’re standing there together, but not so well if you’re trying to tell someone how to get there from another country. A full path is like GPS coordinates. It tells you exactly where something is no matter where you are right now.\nYou can usually use either a full path or a relative path depending on what is most convenient. If we are in the home directory, it is more convenient to enter the full path. If we are in the working directory, it is more convenient to enter the relative path since it involves less typing.\nOver time, it will become easier for you to keep a mental note of the structure of the directories that you are using and how to quickly navigate amongst them."
  },
  {
    "objectID": "shell_lesson/02-the-filesystem.html#relative-path-resolution",
    "href": "shell_lesson/02-the-filesystem.html#relative-path-resolution",
    "title": "Navigating Files and Directories",
    "section": "Relative path resolution",
    "text": "Relative path resolution\nUsing the filesystem diagram below, if pwd displays /Users/thing, what will ls ../backup display?\n\n../backup: No such file or directory\n2012-12-01 2013-01-08 2013-01-27\n2012-12-01/ 2013-01-08/ 2013-01-27/\noriginal pnas_final pnas_sub\n\n\n\n\nSolution (Solution). \nNo: there is a directory backup in /Users.\nNo: this is the content of Users/thing/backup, but with .. we asked for one level further up.\nNo: see previous explanation. Also, we did not specify -F to display / at the end of the directory names.\nYes: ../backup refers to /Users/backup."
  },
  {
    "objectID": "shell_lesson/04-redirection.html",
    "href": "shell_lesson/04-redirection.html",
    "title": "Redirection",
    "section": "",
    "text": "Employ the grep command to search for information within files.\nPrint the results of a command to a file.\nConstruct command pipelines with two or more stages.\nUse for loops to run the same command for several input files.\nWe might want to search multiple FASTQ files for sequences that match our search pattern. However, we need to be careful, because each time we use the > command to redirect output to a file, the new output will replace the output that was already present in the file. This is called “overwriting”.\nHere, the output of our second call to wc shows that we no longer have any lines in our bad_reads.txt file. This is because the second file we searched (SRR097977.fastq) does not contain any lines that match our search sequence. So our file was overwritten and is now empty.\nWe can avoid overwriting our files by using the command >>. >> is known as the “append redirect” and will append new output to the end of a file, rather than overwriting it.\nThe output of our second call to wc shows that we have not overwritten our original data.\nWe can also do this with a single line of code by using a wildcard:\nSince we might have multiple different criteria we want to search for, creating a new output file each time has the potential to clutter up our workspace. We also thus far haven’t been interested in the actual contents of those files, only in the number of reads that we’ve found. We created the files to store the reads and then counted the lines in the file to see how many reads matched our criteria. There’s a way to do this, however, that doesn’t require us to create these intermediate files - the pipe command (|).\nThis is probably not a key on your keyboard you use very much, so let’s all take a minute to find that key. In the UK and US keyboard layouts, and several others, the | character can be found using the key combination Shift+</kbd>. This may be different for other language-specific layouts.\nWhat | does is take the output that is scrolling by on the terminal and uses that output as input to another command.\nIf we don’t want to create a file before counting lines of output from our grep search, we could directly pipe the output of the grep search to the command wc -l. This can be helpful for investigating your output if you are not sure you would like to save it to a file.\nBecause we asked grep for all four lines of each FASTQ record, we need to divide the output by four to get the number of sequences that match our search pattern.\nor bonus - to do this programatically\nRedirecting output is often not intuitive, and can take some time to get used to. Once you’re comfortable with redirection, however, you’ll be able to combine any number of commands to do all sorts of exciting things with your data!\nNone of the command line programs we’ve been learning do anything all that impressive on their own, but when you start chaining them together, you can do some really powerful things very efficiently.\nOne way this is really useful is to move files. Let’s rename all of our .txt files using mv so that they have the years on them, which will document when we created them."
  },
  {
    "objectID": "shell_lesson/04-redirection.html#searching-files",
    "href": "shell_lesson/04-redirection.html#searching-files",
    "title": "Redirection",
    "section": "Searching files",
    "text": "Searching files\nWe discussed in a previous episode how to search within a file using less. We can also search within files without even opening them, using grep. grep is a command-line utility for searching plain-text files for lines matching a specific set of characters (sometimes called a string) or a particular pattern (which can be specified using something called regular expressions). We’re not going to work with regular expressions in this lesson, and are instead going to specify the strings we are searching for. Let’s give it a try!\n\n\n\n\n\n\nNucleotide abbreviations\n\n\n\nThe four nucleotides that appear in DNA are abbreviated A, C, T and G. Unknown nucleotides are represented with the letter N. An N appearing in a sequencing file represents a position where the sequencing machine was not able to confidently determine the nucleotide in that position. You can think of an N as being aNy nucleotide at that position in the DNA sequence.\n\n\nWe’ll search for strings inside of our fastq files. Let’s first make sure we are in the correct directory:\n$ cd ~/shell_data/untrimmed_fastq\nSuppose we want to see how many reads in our file have really bad segments containing 10 consecutive unknown nucleotides (Ns).\n\n\n\n\n\n\nDetermining quality\n\n\n\nIn this lesson, we’re going to be manually searching for strings of Ns within our sequence results to illustrate some principles of file searching. It can be really useful to do this type of searching to get a feel for the quality of your sequencing results, however, in your research you will most likely use a bioinformatics tool that has a built-in program for filtering out low-quality reads. You can learn more about how to use one such tool in this Data Carpentry lesson.\n\n\nLet’s search for the string NNNNNNNNNN in the SRR098026 file:\n$ grep NNNNNNNNNN SRR098026.fastq\nThis command returns a lot of output to the terminal. Every single line in the SRR098026 file that contains at least 10 consecutive Ns is printed to the terminal, regardless of how long or short the file is. We may be interested not only in the actual sequence which contains this string, but in the name (or identifier) of that sequence. We discussed in a previous lesson that the identifier line immediately precedes the nucleotide sequence for each read in a FASTQ file. We may also want to inspect the quality scores associated with each of these reads. To get all of this information, we will return the line immediately before each match and the two lines immediately after each match.\nWe can use the -B argument for grep to return a specific number of lines before each match. The -A argument returns a specific number of lines after each matching line. Here we want the line before and the two lines after each matching line, so we add -B1 -A2 to our grep command:\n$ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq\nOne of the sets of lines returned by this command is:\n@SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35\nCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n+SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35\n#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
  },
  {
    "objectID": "shell_lesson/04-redirection.html#exercise",
    "href": "shell_lesson/04-redirection.html#exercise",
    "title": "Redirection",
    "section": "Exercise",
    "text": "Exercise\n\nSearch for the sequence GNATNACCACTTCC in the SRR098026.fastq file. Have your search return all matching lines and the name (or identifier) for each sequence that contains a match.\nSearch for the sequence AAGTT in both FASTQ files. Have your search return all matching lines and the name (or identifier) for each sequence that contains a match.\n\n\n\nSolution (Solution). \ngrep -B1 GNATNACCACTTCC SRR098026.fastq\n\n@SRR098026.245 HWUSI-EAS1599_1:2:1:2:801 length=35\nGNATNACCACTTCCAGTGCTGANNNNNNNGGGATG\n\ngrep -B1 AAGTT *.fastq\n\nSRR097977.fastq-@SRR097977.11 209DTAAXX_Lenski2_1_7:8:3:247:351 length=36\nSRR097977.fastq:GATTGCTTTAATGAAAAAGTCATATAAGTTGCCATG\n--\nSRR097977.fastq-@SRR097977.67 209DTAAXX_Lenski2_1_7:8:3:544:566 length=36\nSRR097977.fastq:TTGTCCACGCTTTTCTATGTAAAGTTTATTTGCTTT\n--\nSRR097977.fastq-@SRR097977.68 209DTAAXX_Lenski2_1_7:8:3:724:110 length=36\nSRR097977.fastq:TGAAGCCTGCTTTTTTATACTAAGTTTGCATTATAA\n--\nSRR097977.fastq-@SRR097977.80 209DTAAXX_Lenski2_1_7:8:3:258:281 length=36\nSRR097977.fastq:GTGGCGCTGCTGCATAAGTTGGGTTATCAGGTCGTT\n--\nSRR097977.fastq-@SRR097977.92 209DTAAXX_Lenski2_1_7:8:3:353:318 length=36\nSRR097977.fastq:GGCAAAATGGTCCTCCAGCCAGGCCAGAAGCAAGTT\n--\nSRR097977.fastq-@SRR097977.139 209DTAAXX_Lenski2_1_7:8:3:703:655 length=36\nSRR097977.fastq:TTTATTTGTAAAGTTTTGTTGAAATAAGGGTTGTAA\n--\nSRR097977.fastq-@SRR097977.238 209DTAAXX_Lenski2_1_7:8:3:592:919 length=36\nSRR097977.fastq:TTCTTACCATCCTGAAGTTTTTTCATCTTCCCTGAT\n--\nSRR098026.fastq-@SRR098026.158 HWUSI-EAS1599_1:2:1:1:1505 length=35\nSRR098026.fastq:GNNNNNNNNCAAAGTTGATCNNNNNNNNNTGTGCG"
  },
  {
    "objectID": "shell_lesson/04-redirection.html#redirecting-output",
    "href": "shell_lesson/04-redirection.html#redirecting-output",
    "title": "Redirection",
    "section": "Redirecting output",
    "text": "Redirecting output\ngrep allowed us to identify sequences in our FASTQ files that match a particular pattern. All of these sequences were printed to our terminal screen, but in order to work with these sequences and perform other operations on them, we will need to capture that output in some way.\nWe can do this with something called “redirection”. The idea is that we are taking what would ordinarily be printed to the terminal screen and redirecting it to another location. In our case, we want to print this information to a file so that we can look at it later and use other commands to analyze this data.\nThe command for redirecting output to a file is >.\nLet’s try out this command and copy all the records (including all four lines of each record) in our FASTQ files that contain ‘NNNNNNNNNN’ to another file called bad_reads.txt.\n$ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq > bad_reads.txt\n\n\n\n\n\n\nFile extensions\n\n\n\nYou might be confused about why we’re naming our output file with a .txt extension. After all, it will be holding FASTQ formatted data that we’re extracting from our FASTQ files. Won’t it also be a FASTQ file? The answer is, yes - it will be a FASTQ file and it would make sense to name it with a .fastq extension. However, using a .fastq extension will lead us to problems when we move to using wildcards later in this episode. We’ll point out where this becomes important. For now, it’s good that you’re thinking about file extensions!\n\n\nThe prompt should sit there a little bit, and then it should look like nothing happened. But type ls. You should see a new file called bad_reads.txt.\nWe can check the number of lines in our new file using a command called wc. wc stands for word count. This command counts the number of words, lines, and characters in a file. The FASTQ file may change over time, so given the potential for updates, make sure your file matches your instructor’s output.\nAs of Sept. 2023, wc gives the following output:\n$ wc bad_reads.txt\n  537  1073 23217 bad_reads.txt\nThis will tell us the number of lines, words and characters in the file. If we want only the number of lines, we can use the -l flag for lines.\n$ wc -l bad_reads.txt\n537 bad_reads.txt"
  },
  {
    "objectID": "shell_lesson/04-redirection.html#exercise-1",
    "href": "shell_lesson/04-redirection.html#exercise-1",
    "title": "Redirection",
    "section": "Exercise",
    "text": "Exercise\nHow many sequences are there in SRR098026.fastq? Remember that every sequence is formed by four lines.\n\nSolution (Solution). \n$ wc -l SRR098026.fastq\n996\nNow you can divide this number by four to get the number of sequences in your fastq file.\nexpr 996 / 4\n249"
  },
  {
    "objectID": "shell_lesson/04-redirection.html#exercise-2",
    "href": "shell_lesson/04-redirection.html#exercise-2",
    "title": "Redirection",
    "section": "Exercise",
    "text": "Exercise\nHow many sequences in SRR098026.fastq contain at least 3 consecutive Ns?\n\nSolution (Solution). \n$ grep NNN SRR098026.fastq > bad_reads.txt\n$ wc -l bad_reads.txt\n249 bad_reads.txt"
  },
  {
    "objectID": "shell_lesson/04-redirection.html#writing-for-loops",
    "href": "shell_lesson/04-redirection.html#writing-for-loops",
    "title": "Redirection",
    "section": "Writing for loops",
    "text": "Writing for loops\nLoops are key to productivity improvements through automation as they allow us to execute commands repeatedly. Similar to wildcards and tab completion, using loops also reduces the amount of typing (and typing mistakes). Loops are helpful when performing operations on groups of sequencing files, such as unzipping or trimming multiple files. We will use loops for these purposes in subsequent analyses, but will cover the basics of them for now.\nWhen the shell sees the keyword for, it knows to repeat a command (or group of commands) once for each item in a list. Each time the loop runs (called an iteration), an item in the list is assigned in sequence to the variable, and the commands inside the loop are executed, before moving on to the next item in the list. Inside the loop, we call for the variable’s value by putting $ in front of it. The $ tells the shell interpreter to treat the variable as a variable name and substitute its value in its place, rather than treat it as text or an external command. In shell programming, this is usually called “expanding” the variable.\nWe declare a variable by saying\n$ varname=value\nlike\n$ day=Thurs\nand to check it was assigned we can print the variable and concatenate into a larger string with echo. We call the variable with a $\n$ echo today is $day\ntoday is Thurs\nSometimes, we want to expand a variable without any whitespace to its right. Suppose we would like to expand Thurs to create the text Thursday.\n$ echo today is $dayday      # doesn't work\ntoday is\nThe interpreter is trying to expand a variable named Thursday, which (probably) doesn’t exist. We can avoid this problem by enclosing the variable name in braces ({ and }, also called “curly brackets”). bash treats the # character as a comment character. Any text on a line after a # is ignored by bash when evaluating the text as code.\n$ echo today is ${day}day      # now it works!\ntoday is Thursday\nLet’s write a for loop to show us the first two lines of the fastq files we downloaded earlier. You will notice the shell prompt changes from $ to > and back again as we were typing in our loop. The second prompt, >, is different to remind us that we haven’t finished typing a complete command yet. A semicolon, ;, can be used to separate two commands written on a single line.\n$ cd ../untrimmed_fastq/\n$ for filename in *.fastq\n> do\n> head -n 2 ${filename}\n> done\nThe for loop begins with the formula for <variable> in <group to iterate over>. In this case, the word filename is designated as the variable to be used over each iteration. In our case SRR097977.fastq and SRR098026.fastq will be substituted for filename because they fit the pattern of ending with .fastq in the directory we’ve specified. The next line of the for loop is do. The next line is the code that we want to execute. We are telling the loop to print the first two lines of each variable we iterate over. Finally, the word done ends the loop.\nAfter executing the loop, you should see the first two lines of both fastq files printed to the terminal. Let’s create a loop that will save this information to a file.\n$ for filename in *.fastq\n> do\n> head -n 2 ${filename} >> seq_info.txt\n> done\nWhen writing a loop, you will not be able to return to previous lines once you have pressed Enter. Remember that we can cancel the current command using\n\nCtrl+C\n\nIf you notice a mistake that is going to prevent your loop for executing correctly.\nNote that we are using >> to append the text to our seq_info.txt file. If we used >, the seq_info.txt file would be rewritten every time the loop iterates, so it would only have text from the last variable used. Instead, >> adds to the end of the file."
  },
  {
    "objectID": "shell_lesson/04-redirection.html#using-basename-in-for-loops",
    "href": "shell_lesson/04-redirection.html#using-basename-in-for-loops",
    "title": "Redirection",
    "section": "Using Basename in for loops",
    "text": "Using Basename in for loops\nBasename is a function in UNIX that is helpful for removing a uniform part of a name from a list of files. In this case, we will use basename to remove the .fastq extension from the files that we’ve been working with.\n$ basename SRR097977.fastq .fastq\nWe see that this returns just the SRR accession, and no longer has the .fastq file extension on it.\nSRR097977\nIf we try the same thing but use .fasta as the file extension instead, nothing happens. This is because basename only works when it exactly matches a string in the file.\n$ basename SRR097977.fastq .fasta\nSRR097977.fastq\nBasename is really powerful when used in a for loop. It allows to access just the file prefix, which you can use to name things. Let’s try this.\nInside our for loop, we create a new name variable. We call the basename function inside the parenthesis, then give our variable name from the for loop, in this case ${filename}, and finally state that .fastq should be removed from the file name. It’s important to note that we’re not changing the actual files, we’re creating a new variable called name. The line > echo $name will print to the terminal the variable name each time the for loop runs. Because we are iterating over two files, we expect to see two lines of output.\n$ for filename in *.fastq\n> do\n> name=$(basename ${filename} .fastq)\n> echo ${name}\n> done"
  },
  {
    "objectID": "shell_lesson/04-redirection.html#exercise-3",
    "href": "shell_lesson/04-redirection.html#exercise-3",
    "title": "Redirection",
    "section": "Exercise",
    "text": "Exercise\nPrint the file prefix of all of the .txt files in our current directory.\n\nSolution (Solution). \n$ for filename in *.txt\n> do\n> name=$(basename ${filename} .txt)\n> echo ${name}\n> done"
  },
  {
    "objectID": "shell_lesson/04-redirection.html#exercise-4",
    "href": "shell_lesson/04-redirection.html#exercise-4",
    "title": "Redirection",
    "section": "Exercise",
    "text": "Exercise\nRemove _2019 from all of the .txt files.\n\nSolution (Solution). \n$ for filename in *_2019.txt\n> do\n> name=$(basename ${filename} _2019.txt)\n> mv ${filename} ${name}.txt\n> done"
  },
  {
    "objectID": "shell_lesson/05-writing-scripts.html",
    "href": "shell_lesson/05-writing-scripts.html",
    "title": "Writing Scripts and Working with Data",
    "section": "",
    "text": "Use the nano text editor to modify text files.\nWrite a basic shell script.\nUse the bash command to execute a shell script.\nUse chmod to make a script an executable program."
  },
  {
    "objectID": "shell_lesson/05-writing-scripts.html#writing-files",
    "href": "shell_lesson/05-writing-scripts.html#writing-files",
    "title": "Writing Scripts and Working with Data",
    "section": "Writing files",
    "text": "Writing files\nWe’ve been able to do a lot of work with files that already exist, but what if we want to write our own files? We’re not going to type in a FASTA file, but we’ll see as we go through other tutorials, there are a lot of reasons we’ll want to write a file, or edit an existing file.\nTo add text to files, we’re going to use a text editor called Nano. We’re going to create a file to take notes about what we’ve been doing with the data files in ~/shell_data/untrimmed_fastq.\nThis is good practice when working in bioinformatics. We can create a file called README.txt that describes the data files in the directory or documents how the files in that directory were generated. As the name suggests, it’s a file that we or others should read to understand the information in that directory.\nLet’s make sure our working directory is /shell_data/untrimmed_fastq using cd to get to the right spot if necessary, then run nano to create a file called README.txt:\n$ cd shell_data/untrimmed_fastq\n$ nano README.txt\nThe text at the bottom of the screen shows the keyboard shortcuts for performing various tasks in nano. We will talk more about how to interpret this information soon.\n\n\n\n\n\n\nWhich Editor?\n\n\n\nWhen we say, “nano is a text editor,” we really do mean “text”: nano can only work with plain character data, not tables, images, or any other human-friendly media. We use nano in examples because it is one of the least complex text editors. However, because of this trait, nano may not be powerful enough or flexible enough for the work you need to do after this workshop. On Unix systems (such as Linux and Mac OS X), many programmers use Emacs or Vim (both of which require more time to learn), or a graphical editor such as Gedit. On Windows, you may wish to use Notepad++. Windows also has a built-in editor called notepad that can be run from the command line in the same way as nano for the purposes of this lesson.\nNo matter what editor you use, you will need to know the default location where it searches for files and where files are saved. If you start an editor from the shell, it will (probably) use your current working directory as its default location. If you use your computer’s start menu, the editor may want to save files in your desktop or documents directory instead. You can change this by navigating to another directory the first time you “Save As…”\n\n\nLet’s type in a few lines of text. Describe what the files in this directory are or what you’ve been doing with them. Once we’re happy with our text, we can press Ctrl-O (press the Ctrl or Control key and, while holding it down, press the O key) to write our data to disk. You’ll be asked what file we want to save this to: press Return to accept the suggested default of README.txt.\nOnce our file is saved, we can use Ctrl-X to quit the nano editor and return to the shell.\n\n\n\n\n\n\nControl, Ctrl, or ^ Key\n\n\n\nThe Control key is also called the “Ctrl” key. There are various ways in which using the Control key may be described. For example, you may see an instruction to press the Ctrl key and, while holding it down, press the X key, described as any of:\n\nControl-X\nControl+X\nCtrl-X\nCtrl+X\n^X\nC-x\n\nIn nano, along the bottom of the screen you’ll see ^G Get Help ^O WriteOut. This means that you can use Ctrl-G to get help and Ctrl-O to save your file.\n\n\nNow you’ve written a file. You can take a look at it with less or cat, or open it up again and edit it with nano."
  },
  {
    "objectID": "shell_lesson/05-writing-scripts.html#exercise",
    "href": "shell_lesson/05-writing-scripts.html#exercise",
    "title": "Writing Scripts and Working with Data",
    "section": "Exercise",
    "text": "Exercise\nOpen README.txt and add the date to the top of the file and save the file.\n\nSolution (Solution). Use nano README.txt to open the file.\nAdd today’s date and then use Ctrl-X followed by y and Enter to save."
  },
  {
    "objectID": "shell_lesson/05-writing-scripts.html#writing-scripts",
    "href": "shell_lesson/05-writing-scripts.html#writing-scripts",
    "title": "Writing Scripts and Working with Data",
    "section": "Writing scripts",
    "text": "Writing scripts\nA really powerful thing about the command line is that you can write scripts. Scripts let you save commands to run them and also lets you put multiple commands together. Though writing scripts may require an additional time investment initially, this can save you time as you run them repeatedly. Scripts can also address the challenge of reproducibility: if you need to repeat an analysis, you retain a record of your command history within the script.\nOne thing we will commonly want to do with sequencing results is pull out bad reads and write them to a file to see if we can figure out what’s going on with them. We’re going to look for reads with long sequences of N’s like we did before, but now we’re going to write a script, so we can run it each time we get new sequences, rather than type the code in by hand each time.\nWe’re going to create a new file to put this command in. We’ll call it bad-reads-script.sh. The sh isn’t required, but using that extension tells us that it’s a shell script.\n$ nano bad-reads-script.sh\nBad reads have a lot of N’s, so we’re going to look for NNNNNNNNNN with grep. We want the whole FASTQ record, so we’re also going to get the one line above the sequence and the two lines below. We also want to look in all the files that end with .fastq, so we’re going to use the * wildcard.\ngrep -B1 -A2 NNNNNNNNNN *.fastq > scripted_bad_reads.txt\nType your grep command into the file and save it as before. Be careful that you did not add the $ at the beginning of the line.\nNow comes the neat part. We can run this script. Type:\n$ bash bad-reads-script.sh\nIt will look like nothing happened, but now if you look at scripted_bad_reads.txt, you can see that there are now reads in the file."
  },
  {
    "objectID": "shell_lesson/05-writing-scripts.html#exercise-1",
    "href": "shell_lesson/05-writing-scripts.html#exercise-1",
    "title": "Writing Scripts and Working with Data",
    "section": "Exercise",
    "text": "Exercise\nWe want the script to tell us when it’s done.\n\nOpen bad-reads-script.sh and add the line echo \"Script finished!\" after the grep command and save the file.\nRun the updated script.\n\n\nSolution (Solution). \n$ bash bad-reads-script.sh\nScript finished!"
  },
  {
    "objectID": "shell_lesson/06-organization.html",
    "href": "shell_lesson/06-organization.html",
    "title": "Project Organization",
    "section": "",
    "text": "Create a file system for a bioinformatics project.\nExplain what types of files should go in your docs, data, and results directories.\nUse the history command and a text editor like nano to document your work on your project."
  },
  {
    "objectID": "shell_lesson/06-organization.html#getting-your-project-started",
    "href": "shell_lesson/06-organization.html#getting-your-project-started",
    "title": "Project Organization",
    "section": "Getting your project started",
    "text": "Getting your project started\nProject organization is one of the most important parts of a sequencing project, and yet is often overlooked amidst the excitement of getting a first look at new data. Of course, while it’s best to get yourself organized before you even begin your analyses, it’s never too late to start, either.\nYou should approach your sequencing project similarly to how you do a biological experiment and this ideally begins with experimental design. We’re going to assume that you’ve already designed a beautiful sequencing experiment to address your biological question, collected appropriate samples, and that you have enough statistical power to answer the questions you’re interested in asking. These steps are all incredibly important, but beyond the scope of our course. For all of those steps (collecting specimens, extracting DNA, prepping your samples) you’ve likely kept a lab notebook that details how and why you did each step. However, the process of documentation doesn’t stop at the sequencer!\nGenomics projects can quickly accumulate hundreds of files across tens of folders. Every computational analysis you perform over the course of your project is going to create many files, which can especially become a problem when you’ll inevitably want to run some of those analyses again. For instance, you might have made significant headway into your project, but then have to remember the PCR conditions you used to create your sequencing library months prior.\nOther questions might arise along the way:\n\nWhat were your best alignment results?\nWhich folder were they in: Analysis1, AnalysisRedone, or AnalysisRedone2?\nWhich quality cutoff did you use?\nWhat version of a given program did you implement your analysis in?\n\nGood documentation is key to avoiding this issue, and luckily enough, recording your computational experiments is even easier than recording lab data. Copy/Paste will become your best friend, sensible file names will make your analysis understandable by you and your collaborators, and writing the methods section for your next paper will be easy! Remember that in any given project of yours, it’s worthwhile to consider a future version of yourself as an entirely separate collaborator. The better your documenation is, the more this ‘collaborator’ will feel indebted to you!\nWith this in mind, let’s have a look at the best practices for documenting your genomics project. Your future self will thank you.\nIn this exercise we will setup a file system for the project we will be working on during this workshop.\nWe will start by creating a directory that we can use for the rest of the workshop. First navigate to your home directory. Then confirm that you are in the correct directory using the pwd command.\n$ cd\n$ pwd\nYou should see the output:\n/home/<your username here> \n\n\n\n\n\n\nTip\n\n\n\nIf you aren’t in your home directory, the easiest way to get there is to enter the command cd, which always returns you to home.\n\n\n\nExercise\nUse the mkdir command to make the following directories:\n\nmy_project\nmy_project/docs\nmy_project/data\nmy_project/results\n\n\nSolution (Solution). \n$ mkdir my_project\n$ mkdir my_project/docs\n$ mkdir my_project/data\n$ mkdir my_project/results\n\n\nUse ls -R to verify that you have created these directories. The -R option for ls stands for recursive. This option causes ls to return the contents of each subdirectory within the directory iteratively.\n$ ls -R dc_workshop\nYou should see the following output:\nmy_project/:\ndata  docs  results\n\nmy_project/data:\n\nmy_project/docs:\n\nmy_project/results:"
  },
  {
    "objectID": "shell_lesson/06-organization.html#organizing-your-files",
    "href": "shell_lesson/06-organization.html#organizing-your-files",
    "title": "Project Organization",
    "section": "Organizing your files",
    "text": "Organizing your files\nBefore beginning any analysis, it’s important to save a copy of your raw data. The raw data should never be changed. Regardless of how sure you are that you want to carry out a particular data cleaning step, there’s always the chance that you’ll change your mind later or that there will be an error in carrying out the data cleaning and you’ll need to go back a step in the process. Having a raw copy of your data that you never modify guarantees that you will always be able to start over if something goes wrong with your analysis. When starting any analysis, you can make a copy of your raw data file and do your manipulations on that file, rather than the raw version. We learned in a previous episode how to prevent overwriting our raw data files by setting restrictive file permissions.\nYou can store any results that are generated from your analysis in the results folder. This guarantees that you won’t confuse results file and data files in six months or two years when you are looking back through your files in preparation for publishing your study.\nThe docs folder is the place to store any written analysis of your results, notes about how your analyses were carried out, and documents related to your eventual publication."
  },
  {
    "objectID": "shell_lesson/06-organization.html#documenting-your-activity-on-the-project",
    "href": "shell_lesson/06-organization.html#documenting-your-activity-on-the-project",
    "title": "Project Organization",
    "section": "Documenting your activity on the project",
    "text": "Documenting your activity on the project\nWhen carrying out wet-lab analyses, most scientists work from a written protocol and keep a hard copy of written notes in their lab notebook, including any things they did differently from the written protocol. This detailed record-keeping process is just as important when doing computational analyses. Luckily, it’s even easier to record the steps you’ve carried out computational than it is when working at the bench.\nThe history command is a convenient way to document all the commands you have used while analyzing and manipulating your project files. Let’s document the work we have done on our project so far.\nView the commands that you have used so far during this session using history:\n$ history\nThe history likely contains many more commands than you have used for the current project. Let’s view the last several commands that focus on just what we need for this project.\nView the last n lines of your history (where n = approximately the last few lines you think relevant). For our example, we will use the last 7:\n$ history | tail -n 7\n\nExercise\nUsing your knowledge of the shell, use the append redirect >> to create a file called my_project_log_XXXX_XX_XX.sh (Use the four-digit year, two-digit month, and two digit day, e.g. my_project_log_2023-10-05.sh)\n\nSolution (Solution). \n$ history | tail -n 7 >> my_project_log_2023-10-05.sh\nNote we used the last 7 lines as an example, the number of lines may vary.\n\n\nYou may have noticed that your history contains the history command itself. To remove this redundancy from our log, let’s use the nano text editor to fix the file:\n$ nano my_project_log_2017_10_27.sh\n(Remember to replace the 2017_10_27 with your workshop date.)\nFrom the nano screen, you can use your cursor to navigate, type, and delete any redundant lines.\n\n\n\n\n\n\nNavigating in Nano\n\n\n\nAlthough nano is useful, it can be frustrating to edit documents, as you can’t use your mouse to navigate to the part of the document you would like to edit. Here are some useful keyboard shortcuts for moving around within a text document in nano. You can find more information by typing Ctrl-G within nano.\n\n\n\n\n\n\n\nkey\naction\n\n\n\n\nCtrl-Space OR Ctrl-→\nto move forward one word\n\n\nAlt-Space OR Esc-Space OR Ctrl-←\nto move back one word\n\n\nCtrl-A\nto move to the beginning of the current line\n\n\nCtrl-E\nto move to the end of the current line\n\n\nCtrl-W\nto search\n\n\n\n\n\nAdd a date line and comment to the line where you have created the directory. Recall that any text on a line after a # is ignored by bash when evaluating the text as code. For example:\n# 2017_10_27   \n# Created sample directories for the Data Carpentry workshop  \nNext, remove any lines of the history that are not relevant by navigating to those lines and using your delete key. Save your file and close nano.\nYour file should look something like this:\n# 2017_10_27\n# Created sample directories for the Data Carpentry workshop\n\nmkdir dc_workshop\nmkdir dc_workshop/docs\nmkdir dc_workshop/data\nmkdir dc_workshop/results\nIf you keep this file up to date, you can use it to re-do your work on your project if something happens to your results files. To demonstrate how this works, first delete your dc_workshop directory and all of its subdirectories. Look at your directory contents to verify the directory is gone.\n$ rm -r dc_workshop\n$ ls\nshell_data  dc_workshop_log_2017_10_27.sh\nThen run your workshop log file as a bash script. You should see the dc_workshop directory and all of its subdirectories reappear.\n$ bash dc_workshop_log_2017_10_27.sh\n$ ls\nshell_data  dc_workshop dc_workshop_log_2017_10_27.sh\nIt’s important that we keep our workshop log file outside of our dc_workshop directory if we want to use it to recreate our work. It’s also important for us to keep it up to date by regularly updating with the commands that we used to generate our results files.\nCongratulations! You’ve finished your introduction to using the shell for genomics projects. You now know how to navigate your file system, create, copy, move, and remove files and directories, and automate repetitive tasks using scripts and wildcards. With this solid foundation, you’re ready to move on to apply all of these new skills to carrying out more sophisticated bioinformatics analysis work. Don’t worry if everything doesn’t feel perfectly comfortable yet. We’re going to have many more opportunities for practice as we move forward on our bioinformatics journey!\n\nReferences\nA Quick Guide to Organizing Computational Biology Projects\n\n\nSpend the time to organize your file system when you start a new project. Your future self will thank you!\nAlways save a write-protected copy of your raw data."
  }
]