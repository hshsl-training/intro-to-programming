---
title: Control Structures I
code-copy: true
jupyter: python3
---

## Python Basics: If statements and conditional execution

::: {.callout-note appearance="minimal"}

**Questions:**

- "How can my programs do different things based on data values?"

**Objectives:**

- "Write conditional statements including `if`, `elif`, and `else` branches."
- "Correctly evaluate expressions containing `and` and `or`."
  
:::

A key part of programming is making the computer do different things depending on the outcome
of a test. This functionality is provided by the conditional statements `if`, `elif`, and `else`.

For this processes, and also for the `for` loops, Python relays on indentation. Indentation refers to the spaces at the beginning of a code line. Python uses indentation to indicate a block of code. This is a very importnat concept because without properly indenting Python may raise an `IndentationError`. 

![Python Indentation](../python_lesson/fig/Indentation-python2.jpg)

## Conditionals

We can ask Python to take different actions, depending on a condition, with an `if` statement:

```{python}
num = 37
if num > 100:
    print('greater')
else:
    print('not greater')
print('done')
```
Output:
```{output}
not greater
done
```

The second line of this code uses the keyword `if` to tell Python that we want to make a choice. If the test that follows the `if` statement is true, the body of the `if` (i.e., the lines indented underneath it) are executed.
If the test is false, the body of the `else` is executed instead. Only one or the other is ever executed.

![Executing a Conditional](../python_lesson/fig/python-flowchart-conditional.png)

Conditional statements don't have to include an `else`. If there isn't one, Python simply does nothing if the test is false:

```{python}
num = 53
print('before conditional...')
if num > 100:
    print(num,' is greater than 100')
print('...after conditional')
```

Output:

```{output}
before conditional...
...after conditional
```

We can also chain several tests together using `elif`, which is short for "else if".
The following Python code uses `elif` to print the sign of a number.

```{python}
num = -3

if num > 0:
    print(num, 'is positive')
elif num == 0:
    print(num, 'is zero')
else:
    print(num, 'is negative')
```

Output:

```{output}
"-3 is negative"
```

Note that to test for equality we use a double equals sign `==` rather than a single equals sign `=` which is used to assign values.

We can also combine tests using `and` and `or`.
`and` is only true if both parts are true:

```{python}
if (1 > 0) and (-1 > 0):
    print('both parts are true')
else:
    print('at least one part is false')
```

Output: 

```{output}
at least one part is false
```

While `or` is true if at least one part is true:

```{python}
if (1 < 0) or (-1 < 0):
    print('at least one test is true')
```

Output:

```{output}
at least one test is true
```

:::: {.callout-note appearance="minimal"}

## `True` and `False`: Examples
`True` and `False` are special words in Python called `booleans`, which represent truth values. 
A statement such as `1 < 0` returns the value `False`, while `-1 < 0` returns the value `True`.

Consider this code:

```{python}
 if 4 > 5:
     print('A')
 elif 4 == 5:
    print('B')
elif 4 < 5:
    print('C')
```

Which of the following would be printed if you were to run this code? Why did you pick this answer?

1.  A
2.  B
3.  C
4.  B and C
   
::: {.callout-tip collapse="true"}
C gets printed because the first two conditions, `4 > 5` and `4 == 5`, are not true, but `4 < 5` is true.
:::

`True` and `False` booleans are not the only values in Python that are true and false. In fact, *any* value can be used in an `if` or `elif`. After reading and running the code below, explain what the rule is for which values are considered true and which are considered false.

```{python}
if '':
    print('empty string is true')
if 'word':
    print('word is true')
if []:
    print('empty list is true')
if [1, 2, 3]:
    print('non-empty list is true')
if 0:
    print('zero is true')
if 1:
    print('one is true')
```

Output:
```{output}
word is true
non-empty list is true
one is true
```

Sometimes it is useful to check whether some condition is not true. The Boolean operator `not` can do this explicitly. After reading and running the code below write some `if` statements that use `not` to test the rule that you formulated in the previous challenge.

```{python}
if not '':
    print('empty string is not true')
if not 'word':
    print('word is not true')
if not not True:
    print('not not True is true')
```

Output:
```{output}
empty string is not true
not not True is true
```

Write some conditions that print `True` if the variable `a` is within 10% of the variable `b` and `False` otherwise. 

Hint: You can make the condition easier to understand if you use the `abs` function --- `help` will tell you what it does! 

::: {.callout-tip collapse="true"}
 ## Solution 1
```{python}
a = 5
b = 5.1

if abs(a - b) < 0.1 * abs(b):
    print('True')
else:
    print('False')
```

## Solution 2
```{python}
print(abs(a - b) < 0.1 * abs(b))
```

 This works because the Booleans `True` and `False` have string representations which can be printed.
:::
::::

::: {.callout-note appearance="minimal"}
**Keypoints:**

- "Use `if condition` to start a conditional statement, `elif condition` to provide additional tests, and `else` to provide a default."
- "The bodies of the branches of conditional statements must be indented."
- "Use `==` to test for equality."
- "`X and Y` is only true if both `X` and `Y` are true."
- "`X or Y` is true if either `X` or `Y`, or both, are true."
- "Zero, the empty string, and the empty list are considered false; all other numbers, strings, and lists are considered true."
- "`True` and `False` represent truth values."

:::